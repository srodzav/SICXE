//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\CODE\LAB\SICXE\SICXE\Gramatica.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXE {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GramaticaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, INSTR1=17, 
		INSTR2=18, INSTR3=19, REG=20, DIRECTIVE=21, START=22, END=23, EQU=24, 
		LABEL=25, NUM=26, NUM_CHAR=27, EMPTY=28, ENDL=29, WS=30;
	public const int
		RULE_prog = 0, RULE_start = 1, RULE_end = 2, RULE_input = 3, RULE_propositions = 4, 
		RULE_proposition = 5, RULE_instruction = 6, RULE_directive = 7, RULE_label = 8, 
		RULE_instr_args = 9, RULE_instr_args2 = 10, RULE_exp = 11, RULE_exp2 = 12, 
		RULE_directive_args = 13, RULE_compileUnit = 14;
	public static readonly string[] ruleNames = {
		"prog", "start", "end", "input", "propositions", "proposition", "instruction", 
		"directive", "label", "instr_args", "instr_args2", "exp", "exp2", "directive_args", 
		"compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'BASE'", "', X'", "',X'", "', '", "','", "'@'", "'#'", "'('", 
		"')'", "'-'", "'*'", "'/'", "'X''", "'''", "'C''", null, null, null, null, 
		null, "'START'", "'END'", "'EQU'", null, null, null, "' '", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "INSTR1", "INSTR2", "INSTR3", "REG", "DIRECTIVE", 
		"START", "END", "EQU", "LABEL", "NUM", "NUM_CHAR", "EMPTY", "ENDL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramaticaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public PropositionsContext propositions() {
			return GetRuleContext<PropositionsContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			State = 33;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; start();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; propositions(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32; end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode START() { return GetToken(GramaticaParser.START, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public PropositionContext proposition() {
			return GetRuleContext<PropositionContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_start);
		try {
			State = 41;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; label();
				State = 36; Match(START);
				State = 37; Match(NUM);
				State = 38; Match(ENDL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; proposition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(GramaticaParser.END, 0); }
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_end);
		try {
			State = 49;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; Match(END);
				State = 44; input();
				State = 45; Match(ENDL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(END);
				State = 48; input();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LABEL) {
				{
				State = 51; Match(LABEL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropositionsContext : ParserRuleContext {
		public PropositionsContext propositions() {
			return GetRuleContext<PropositionsContext>(0);
		}
		public PropositionContext proposition() {
			return GetRuleContext<PropositionContext>(0);
		}
		public PropositionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propositions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPropositions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPropositions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropositions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionsContext propositions() {
		return propositions(0);
	}

	private PropositionsContext propositions(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PropositionsContext _localctx = new PropositionsContext(_ctx, _parentState);
		PropositionsContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_propositions, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 55; proposition();
			}
			_ctx.stop = _input.Lt(-1);
			State = 61;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PropositionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_propositions);
					State = 57;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 58; proposition();
					}
					} 
				}
				State = 63;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropositionContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public PropositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProposition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProposition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionContext proposition() {
		PropositionContext _localctx = new PropositionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposition);
		try {
			State = 66;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; instruction();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		public ITerminalNode INSTR3() { return GetToken(GramaticaParser.INSTR3, 0); }
		public Instr_argsContext instr_args() {
			return GetRuleContext<Instr_argsContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode INSTR2() { return GetToken(GramaticaParser.INSTR2, 0); }
		public Instr_args2Context instr_args2() {
			return GetRuleContext<Instr_args2Context>(0);
		}
		public ITerminalNode INSTR1() { return GetToken(GramaticaParser.INSTR1, 0); }
		public ITerminalNode EQU() { return GetToken(GramaticaParser.EQU, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruction);
		try {
			State = 128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; label();
				State = 69; Match(INSTR3);
				State = 70; instr_args();
				State = 71; Match(ENDL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; Match(INSTR3);
				State = 74; instr_args();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; label();
				State = 76; Match(INSTR3);
				State = 77; exp();
				State = 78; Match(ENDL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; Match(INSTR3);
				State = 81; exp();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 82; label();
				State = 83; Match(T__0);
				State = 84; Match(INSTR3);
				State = 85; instr_args();
				State = 86; Match(ENDL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88; Match(T__0);
				State = 89; Match(INSTR3);
				State = 90; instr_args();
				State = 91; Match(ENDL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 93; label();
				State = 94; Match(INSTR2);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 96; label();
				State = 97; Match(INSTR2);
				State = 98; label();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 100; label();
				State = 101; Match(INSTR2);
				State = 102; instr_args2();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 104; Match(INSTR2);
				State = 105; instr_args2();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 106; label();
				State = 107; Match(INSTR1);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 109; Match(INSTR1);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 110; label();
				State = 111; Match(EQU);
				State = 112; instr_args();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 114; Match(EQU);
				State = 115; instr_args();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 116; label();
				State = 117; Match(EQU);
				State = 118; label();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 120; Match(EQU);
				State = 121; label();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 122; label();
				State = 123; Match(EQU);
				State = 124; exp();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 126; Match(EQU);
				State = 127; exp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		public ITerminalNode DIRECTIVE() { return GetToken(GramaticaParser.DIRECTIVE, 0); }
		public Directive_argsContext directive_args() {
			return GetRuleContext<Directive_argsContext>(0);
		}
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directive);
		try {
			State = 151;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; label();
				State = 131; Match(DIRECTIVE);
				State = 132; directive_args();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(T__1);
				State = 135; Match(LABEL);
				State = 136; Match(ENDL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; label();
				State = 138; Match(T__1);
				State = 139; label();
				State = 140; Match(ENDL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; label();
				State = 143; Match(DIRECTIVE);
				State = 144; exp();
				State = 145; Match(ENDL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 147; Match(DIRECTIVE);
				State = 148; exp();
				State = 149; Match(ENDL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 153; Match(LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_argsContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Instr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInstr_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInstr_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_argsContext instr_args() {
		Instr_argsContext _localctx = new Instr_argsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_instr_args);
		try {
			State = 187;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; Match(LABEL);
				State = 157; Match(T__2);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(LABEL);
				State = 159; Match(T__3);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; Match(LABEL);
				State = 161; Match(T__4);
				State = 162; Match(NUM);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163; Match(LABEL);
				State = 164; Match(T__5);
				State = 165; Match(NUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 166; Match(T__6);
				State = 167; Match(LABEL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168; Match(T__7);
				State = 169; Match(LABEL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170; Match(NUM);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 171; Match(T__6);
				State = 172; Match(NUM);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 173; Match(T__7);
				State = 174; Match(NUM);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 175; Match(LABEL);
					}
					break;
				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 178; Match(NUM);
				State = 179; Match(T__3);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 180; Match(NUM);
				State = 181; Match(T__2);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 182; Match(T__6);
				State = 183; exp();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 184; Match(T__7);
				State = 185; exp();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 186; exp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_args2Context : ParserRuleContext {
		public ITerminalNode[] REG() { return GetTokens(GramaticaParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(GramaticaParser.REG, i);
		}
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public Instr_args2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_args2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInstr_args2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInstr_args2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_args2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_args2Context instr_args2() {
		Instr_args2Context _localctx = new Instr_args2Context(_ctx, State);
		EnterRule(_localctx, 20, RULE_instr_args2);
		try {
			State = 202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; Match(REG);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; Match(REG);
				State = 191; Match(T__4);
				State = 192; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; Match(REG);
				State = 194; Match(T__5);
				State = 195; Match(REG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196; Match(REG);
				State = 197; Match(T__4);
				State = 198; Match(NUM);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 199; Match(REG);
				State = 200; Match(T__5);
				State = 201; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp2Context exp2() {
			return GetRuleContext<Exp2Context>(0);
		}
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_exp);
		try {
			State = 217;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(T__8);
				State = 205; exp();
				State = 206; Match(T__9);
				State = 207; exp2();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(T__10);
				State = 210; exp();
				State = 211; exp2();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213; Match(LABEL);
				State = 214; exp2();
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215; Match(NUM);
				State = 216; exp2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp2Context : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp2Context exp2() {
			return GetRuleContext<Exp2Context>(0);
		}
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public Exp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterExp2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitExp2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp2Context exp2() {
		Exp2Context _localctx = new Exp2Context(_ctx, State);
		EnterRule(_localctx, 24, RULE_exp2);
		try {
			State = 241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; Match(T__0);
				State = 220; exp();
				State = 221; exp2();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; Match(T__10);
				State = 224; exp();
				State = 225; exp2();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227; Match(T__11);
				State = 228; exp();
				State = 229; exp2();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231; Match(T__12);
				State = 232; exp();
				State = 233; exp2();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 235; Match(LABEL);
					}
					break;
				}
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 238; Match(NUM);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_argsContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public Directive_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDirective_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDirective_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_argsContext directive_args() {
		Directive_argsContext _localctx = new Directive_argsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_directive_args);
		try {
			State = 250;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; Match(NUM);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; Match(T__13);
				State = 245; Match(NUM);
				State = 246; Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 3);
				{
				State = 247; Match(T__15);
				State = 248; Match(LABEL);
				State = 249; Match(T__14);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GramaticaParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return propositions_sempred((PropositionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool propositions_sempred(PropositionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x101\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\x3\x2\x3\x2\x5\x2$\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3,\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x34\n\x4\x3\x5"+
		"\x5\x5\x37\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6>\n\x6\f\x6\xE\x6\x41"+
		"\v\x6\x3\a\x3\a\x5\a\x45\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x83\n\b\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x9A\n\t\x3\n\x5\n\x9D\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\xB3\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x5\v\xBE\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x5\f\xCD\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\xDC\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xEF\n\xE\x3\xE\x5\xE\xF2\n\xE\x5\xE\xF4\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x5\xF\xFD\n\xF\x3\x10\x3\x10\x3\x10\x2\x2\x3\n\x11"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2\x2\x2\x12D\x2#\x3\x2\x2\x2\x4+\x3\x2\x2\x2\x6"+
		"\x33\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n\x38\x3\x2\x2\x2\f\x44\x3\x2\x2\x2"+
		"\xE\x82\x3\x2\x2\x2\x10\x99\x3\x2\x2\x2\x12\x9C\x3\x2\x2\x2\x14\xBD\x3"+
		"\x2\x2\x2\x16\xCC\x3\x2\x2\x2\x18\xDB\x3\x2\x2\x2\x1A\xF3\x3\x2\x2\x2"+
		"\x1C\xFC\x3\x2\x2\x2\x1E\xFE\x3\x2\x2\x2 $\x5\x4\x3\x2!$\x5\n\x6\x2\""+
		"$\x5\x6\x4\x2# \x3\x2\x2\x2#!\x3\x2\x2\x2#\"\x3\x2\x2\x2$\x3\x3\x2\x2"+
		"\x2%&\x5\x12\n\x2&\'\a\x18\x2\x2\'(\a\x1C\x2\x2()\a\x1F\x2\x2),\x3\x2"+
		"\x2\x2*,\x5\f\a\x2+%\x3\x2\x2\x2+*\x3\x2\x2\x2,\x5\x3\x2\x2\x2-.\a\x19"+
		"\x2\x2./\x5\b\x5\x2/\x30\a\x1F\x2\x2\x30\x34\x3\x2\x2\x2\x31\x32\a\x19"+
		"\x2\x2\x32\x34\x5\b\x5\x2\x33-\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\a\x3"+
		"\x2\x2\x2\x35\x37\a\x1B\x2\x2\x36\x35\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2"+
		"\x37\t\x3\x2\x2\x2\x38\x39\b\x6\x1\x2\x39:\x5\f\a\x2:?\x3\x2\x2\x2;<\f"+
		"\x4\x2\x2<>\x5\f\a\x2=;\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3"+
		"\x2\x2\x2@\v\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x45\x5\xE\b\x2\x43\x45\x5"+
		"\x10\t\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45\r\x3\x2\x2\x2\x46"+
		"G\x5\x12\n\x2GH\a\x15\x2\x2HI\x5\x14\v\x2IJ\a\x1F\x2\x2J\x83\x3\x2\x2"+
		"\x2KL\a\x15\x2\x2L\x83\x5\x14\v\x2MN\x5\x12\n\x2NO\a\x15\x2\x2OP\x5\x18"+
		"\r\x2PQ\a\x1F\x2\x2Q\x83\x3\x2\x2\x2RS\a\x15\x2\x2S\x83\x5\x18\r\x2TU"+
		"\x5\x12\n\x2UV\a\x3\x2\x2VW\a\x15\x2\x2WX\x5\x14\v\x2XY\a\x1F\x2\x2Y\x83"+
		"\x3\x2\x2\x2Z[\a\x3\x2\x2[\\\a\x15\x2\x2\\]\x5\x14\v\x2]^\a\x1F\x2\x2"+
		"^\x83\x3\x2\x2\x2_`\x5\x12\n\x2`\x61\a\x14\x2\x2\x61\x83\x3\x2\x2\x2\x62"+
		"\x63\x5\x12\n\x2\x63\x64\a\x14\x2\x2\x64\x65\x5\x12\n\x2\x65\x83\x3\x2"+
		"\x2\x2\x66g\x5\x12\n\x2gh\a\x14\x2\x2hi\x5\x16\f\x2i\x83\x3\x2\x2\x2j"+
		"k\a\x14\x2\x2k\x83\x5\x16\f\x2lm\x5\x12\n\x2mn\a\x13\x2\x2n\x83\x3\x2"+
		"\x2\x2o\x83\a\x13\x2\x2pq\x5\x12\n\x2qr\a\x1A\x2\x2rs\x5\x14\v\x2s\x83"+
		"\x3\x2\x2\x2tu\a\x1A\x2\x2u\x83\x5\x14\v\x2vw\x5\x12\n\x2wx\a\x1A\x2\x2"+
		"xy\x5\x12\n\x2y\x83\x3\x2\x2\x2z{\a\x1A\x2\x2{\x83\x5\x12\n\x2|}\x5\x12"+
		"\n\x2}~\a\x1A\x2\x2~\x7F\x5\x18\r\x2\x7F\x83\x3\x2\x2\x2\x80\x81\a\x1A"+
		"\x2\x2\x81\x83\x5\x18\r\x2\x82\x46\x3\x2\x2\x2\x82K\x3\x2\x2\x2\x82M\x3"+
		"\x2\x2\x2\x82R\x3\x2\x2\x2\x82T\x3\x2\x2\x2\x82Z\x3\x2\x2\x2\x82_\x3\x2"+
		"\x2\x2\x82\x62\x3\x2\x2\x2\x82\x66\x3\x2\x2\x2\x82j\x3\x2\x2\x2\x82l\x3"+
		"\x2\x2\x2\x82o\x3\x2\x2\x2\x82p\x3\x2\x2\x2\x82t\x3\x2\x2\x2\x82v\x3\x2"+
		"\x2\x2\x82z\x3\x2\x2\x2\x82|\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\xF\x3"+
		"\x2\x2\x2\x84\x85\x5\x12\n\x2\x85\x86\a\x17\x2\x2\x86\x87\x5\x1C\xF\x2"+
		"\x87\x9A\x3\x2\x2\x2\x88\x89\a\x4\x2\x2\x89\x8A\a\x1B\x2\x2\x8A\x9A\a"+
		"\x1F\x2\x2\x8B\x8C\x5\x12\n\x2\x8C\x8D\a\x4\x2\x2\x8D\x8E\x5\x12\n\x2"+
		"\x8E\x8F\a\x1F\x2\x2\x8F\x9A\x3\x2\x2\x2\x90\x91\x5\x12\n\x2\x91\x92\a"+
		"\x17\x2\x2\x92\x93\x5\x18\r\x2\x93\x94\a\x1F\x2\x2\x94\x9A\x3\x2\x2\x2"+
		"\x95\x96\a\x17\x2\x2\x96\x97\x5\x18\r\x2\x97\x98\a\x1F\x2\x2\x98\x9A\x3"+
		"\x2\x2\x2\x99\x84\x3\x2\x2\x2\x99\x88\x3\x2\x2\x2\x99\x8B\x3\x2\x2\x2"+
		"\x99\x90\x3\x2\x2\x2\x99\x95\x3\x2\x2\x2\x9A\x11\x3\x2\x2\x2\x9B\x9D\a"+
		"\x1B\x2\x2\x9C\x9B\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x13\x3\x2\x2\x2"+
		"\x9E\x9F\a\x1B\x2\x2\x9F\xBE\a\x5\x2\x2\xA0\xA1\a\x1B\x2\x2\xA1\xBE\a"+
		"\x6\x2\x2\xA2\xA3\a\x1B\x2\x2\xA3\xA4\a\a\x2\x2\xA4\xBE\a\x1C\x2\x2\xA5"+
		"\xA6\a\x1B\x2\x2\xA6\xA7\a\b\x2\x2\xA7\xBE\a\x1C\x2\x2\xA8\xA9\a\t\x2"+
		"\x2\xA9\xBE\a\x1B\x2\x2\xAA\xAB\a\n\x2\x2\xAB\xBE\a\x1B\x2\x2\xAC\xBE"+
		"\a\x1C\x2\x2\xAD\xAE\a\t\x2\x2\xAE\xBE\a\x1C\x2\x2\xAF\xB0\a\n\x2\x2\xB0"+
		"\xBE\a\x1C\x2\x2\xB1\xB3\a\x1B\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2"+
		"\x2\x2\xB3\xBE\x3\x2\x2\x2\xB4\xB5\a\x1C\x2\x2\xB5\xBE\a\x6\x2\x2\xB6"+
		"\xB7\a\x1C\x2\x2\xB7\xBE\a\x5\x2\x2\xB8\xB9\a\t\x2\x2\xB9\xBE\x5\x18\r"+
		"\x2\xBA\xBB\a\n\x2\x2\xBB\xBE\x5\x18\r\x2\xBC\xBE\x5\x18\r\x2\xBD\x9E"+
		"\x3\x2\x2\x2\xBD\xA0\x3\x2\x2\x2\xBD\xA2\x3\x2\x2\x2\xBD\xA5\x3\x2\x2"+
		"\x2\xBD\xA8\x3\x2\x2\x2\xBD\xAA\x3\x2\x2\x2\xBD\xAC\x3\x2\x2\x2\xBD\xAD"+
		"\x3\x2\x2\x2\xBD\xAF\x3\x2\x2\x2\xBD\xB2\x3\x2\x2\x2\xBD\xB4\x3\x2\x2"+
		"\x2\xBD\xB6\x3\x2\x2\x2\xBD\xB8\x3\x2\x2\x2\xBD\xBA\x3\x2\x2\x2\xBD\xBC"+
		"\x3\x2\x2\x2\xBE\x15\x3\x2\x2\x2\xBF\xCD\a\x16\x2\x2\xC0\xC1\a\x16\x2"+
		"\x2\xC1\xC2\a\a\x2\x2\xC2\xCD\a\x16\x2\x2\xC3\xC4\a\x16\x2\x2\xC4\xC5"+
		"\a\b\x2\x2\xC5\xCD\a\x16\x2\x2\xC6\xC7\a\x16\x2\x2\xC7\xC8\a\a\x2\x2\xC8"+
		"\xCD\a\x1C\x2\x2\xC9\xCA\a\x16\x2\x2\xCA\xCB\a\b\x2\x2\xCB\xCD\a\x1C\x2"+
		"\x2\xCC\xBF\x3\x2\x2\x2\xCC\xC0\x3\x2\x2\x2\xCC\xC3\x3\x2\x2\x2\xCC\xC6"+
		"\x3\x2\x2\x2\xCC\xC9\x3\x2\x2\x2\xCD\x17\x3\x2\x2\x2\xCE\xCF\a\v\x2\x2"+
		"\xCF\xD0\x5\x18\r\x2\xD0\xD1\a\f\x2\x2\xD1\xD2\x5\x1A\xE\x2\xD2\xDC\x3"+
		"\x2\x2\x2\xD3\xD4\a\r\x2\x2\xD4\xD5\x5\x18\r\x2\xD5\xD6\x5\x1A\xE\x2\xD6"+
		"\xDC\x3\x2\x2\x2\xD7\xD8\a\x1B\x2\x2\xD8\xDC\x5\x1A\xE\x2\xD9\xDA\a\x1C"+
		"\x2\x2\xDA\xDC\x5\x1A\xE\x2\xDB\xCE\x3\x2\x2\x2\xDB\xD3\x3\x2\x2\x2\xDB"+
		"\xD7\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\x19\x3\x2\x2\x2\xDD\xDE\a\x3"+
		"\x2\x2\xDE\xDF\x5\x18\r\x2\xDF\xE0\x5\x1A\xE\x2\xE0\xF4\x3\x2\x2\x2\xE1"+
		"\xE2\a\r\x2\x2\xE2\xE3\x5\x18\r\x2\xE3\xE4\x5\x1A\xE\x2\xE4\xF4\x3\x2"+
		"\x2\x2\xE5\xE6\a\xE\x2\x2\xE6\xE7\x5\x18\r\x2\xE7\xE8\x5\x1A\xE\x2\xE8"+
		"\xF4\x3\x2\x2\x2\xE9\xEA\a\xF\x2\x2\xEA\xEB\x5\x18\r\x2\xEB\xEC\x5\x1A"+
		"\xE\x2\xEC\xF4\x3\x2\x2\x2\xED\xEF\a\x1B\x2\x2\xEE\xED\x3\x2\x2\x2\xEE"+
		"\xEF\x3\x2\x2\x2\xEF\xF4\x3\x2\x2\x2\xF0\xF2\a\x1C\x2\x2\xF1\xF0\x3\x2"+
		"\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xDD\x3\x2\x2\x2\xF3"+
		"\xE1\x3\x2\x2\x2\xF3\xE5\x3\x2\x2\x2\xF3\xE9\x3\x2\x2\x2\xF3\xEE\x3\x2"+
		"\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4\x1B\x3\x2\x2\x2\xF5\xFD\a\x1C\x2\x2\xF6"+
		"\xF7\a\x10\x2\x2\xF7\xF8\a\x1C\x2\x2\xF8\xFD\a\x11\x2\x2\xF9\xFA\a\x12"+
		"\x2\x2\xFA\xFB\a\x1B\x2\x2\xFB\xFD\a\x11\x2\x2\xFC\xF5\x3\x2\x2\x2\xFC"+
		"\xF6\x3\x2\x2\x2\xFC\xF9\x3\x2\x2\x2\xFD\x1D\x3\x2\x2\x2\xFE\xFF\a\x2"+
		"\x2\x3\xFF\x1F\x3\x2\x2\x2\x13#+\x33\x36?\x44\x82\x99\x9C\xB2\xBD\xCC"+
		"\xDB\xEE\xF1\xF3\xFC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXE
